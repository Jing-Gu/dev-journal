"use strict";(self.webpackChunkdev_journal=self.webpackChunkdev_journal||[]).push([[570],{5484:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var t=r(4848),i=r(8453);const o={},s="Web page rendering",l={id:"web-technology/webpage-rendering",title:"Web page rendering",description:"How do browsers render a web page",source:"@site/docs/web-technology/webpage-rendering.md",sourceDirName:"web-technology",slug:"/web-technology/webpage-rendering",permalink:"/dev-journal/web-technology/webpage-rendering",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docuSidebar",previous:{title:"System administration and networking",permalink:"/dev-journal/web-technology/sysadmin"}},a={},d=[{value:"How do browsers render a web page",id:"how-do-browsers-render-a-web-page",level:2},{value:"Repaint",id:"repaint",level:2},{value:"Reflow",id:"reflow",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"web-page-rendering",children:"Web page rendering"}),"\n",(0,t.jsx)(n.h2,{id:"how-do-browsers-render-a-web-page",children:"How do browsers render a web page"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Get resources - including html, css, images etc"}),"\n",(0,t.jsx)(n.li,{children:"Parse HTML and create a DOM tree - The DOM is formed from the HTML that is received from a server."}),"\n",(0,t.jsxs)(n.li,{children:["Create ",(0,t.jsx)(n.strong,{children:"Render tree"})," from DOM tree - Render tree reflects the DOM structure except for invisible elements ",(0,t.jsx)(n.code,{children:"display:none;"})]}),"\n",(0,t.jsx)(n.li,{children:'Layout - For each render tree element, its coordinates are calculated, which is called "layout".'}),"\n",(0,t.jsx)(n.li,{children:"Painting - display all"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"repaint",children:"Repaint"}),"\n",(0,t.jsx)(n.p,{children:"When changing element styles which don't affect the element's position on a page (such as background-color, border-color, visibility), the browser just repaints the element again with the new styles applied"}),"\n",(0,t.jsx)(n.h2,{id:"reflow",children:"Reflow"}),"\n",(0,t.jsx)(n.p,{children:"When the changes affect document contents or structure, or element position, a reflow (or relayout) happens. These changes are usually triggered by:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"DOM manipulation (element addition, deletion, altering, or changing element order);"}),"\n",(0,t.jsx)(n.li,{children:"Contents changes, including text changes in form fields;"}),"\n",(0,t.jsx)(n.li,{children:"Calculation or altering of CSS properties;"}),"\n",(0,t.jsx)(n.li,{children:"Adding or removing style sheets;"}),"\n",(0,t.jsx)(n.li,{children:'Changing the "class" attribute;'}),"\n",(0,t.jsx)(n.li,{children:"Browser window manipulation (resizing, scrolling);"}),"\n",(0,t.jsxs)(n.li,{children:["Pseudo-class activation (",":hover",")."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var t=r(6540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);