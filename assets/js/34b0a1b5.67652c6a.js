"use strict";(self.webpackChunkdev_journal=self.webpackChunkdev_journal||[]).push([[225],{416:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var s=r(4848),o=r(8453);const i={},t="Basics",a={id:"programming fondations/basics",title:"Basics",description:"Some basic concepts collected progressively",source:"@site/docs/programming fondations/basics.md",sourceDirName:"programming fondations",slug:"/programming fondations/basics",permalink:"/dev-journal/programming fondations/basics",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docuSidebar",previous:{title:"Strong vs weak typing",permalink:"/dev-journal/programming fondations/typings-strong-weak"},next:{title:"OOP - Object oriented programming",permalink:"/dev-journal/programming fondations/oop"}},d={},c=[{value:"Null check",id:"null-check",level:2},{value:"Differences between <code>undeclared</code>, <code>undefined</code>, <code>null</code> variables",id:"differences-between-undeclared-undefined-null-variables",level:2},{value:"<code>typeof</code> vs <code>isNaN</code>",id:"typeof-vs-isnan",level:2}];function l(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"basics",children:"Basics"}),"\n",(0,s.jsx)(n.p,{children:"Some basic concepts collected progressively"}),"\n",(0,s.jsx)(n.h2,{id:"null-check",children:"Null check"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// old way\nif(foo !== null && foo !== underfined){}\n\n// new way\nif (foo) {}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"if(foo)"})," will evaluate to true if foo is NOT: ",(0,s.jsx)(n.code,{children:"null"}),", ",(0,s.jsx)(n.code,{children:"undefined"}),", ",(0,s.jsx)(n.code,{children:"NaN"}),", empty string, ",(0,s.jsx)(n.code,{children:"0"})," or ",(0,s.jsx)(n.code,{children:"false"}),". Be careful with ",(0,s.jsx)(n.code,{children:"0"})," as 0 is considered false."]}),"\n",(0,s.jsxs)(n.h2,{id:"differences-between-undeclared-undefined-null-variables",children:["Differences between ",(0,s.jsx)(n.code,{children:"undeclared"}),", ",(0,s.jsx)(n.code,{children:"undefined"}),", ",(0,s.jsx)(n.code,{children:"null"})," variables"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Undeclared variables"})," are created when you assign a value to an identifier that is NOT previously created using\xa0",(0,s.jsx)(n.code,{children:"var"}),",",(0,s.jsx)(n.code,{children:"\xa0let"})," ",(0,s.jsx)(n.code,{children:"or\xa0const"}),". They are defined globally and will throw ",(0,s.jsx)(n.code,{children:"ReferenceError"})," when trying to assign to an undeclared variable in strict mode."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function foo() {\n  x = 1; // Throws a ReferenceError in strict mode\n}\n\nfoo();\nconsole.log(x); // 1\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Undefined variable"})," is a variable that has been declared, but not assigned a value. It is of type\xa0",(0,s.jsx)(n.code,{children:"undefined"}),". If assigning a function to a variable and this function doesn\u2019t return any value, the variable also has value undefined."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"var foo;\nconsole.log(foo); // undefined\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Null"})," represents no value and is different from\xa0undefined, because a variable that is\xa0null will have been explicitly assigned to the\xa0null value."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"var foo = null;\nconsole.log(foo === null); // true\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Never leave variables undeclared or unassigned.\nJust explicitly assign\xa0null to them after declaring if you don't intend to use it yet."})}),"\n",(0,s.jsxs)(n.h2,{id:"typeof-vs-isnan",children:[(0,s.jsx)(n.code,{children:"typeof"})," vs ",(0,s.jsx)(n.code,{children:"isNaN"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"typeof"})," ",(0,s.jsx)(n.em,{children:"operator"})," is used to determine the type of a variable or expression. It returns a string indicating the data type of the operand."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'typeof 42; // returns "number"\ntypeof "hello"; // returns "string"\ntypeof true; // returns "boolean"\ntypeof []; // returns "object"\ntypeof {}; // returns "object"\n// highlight-start\ntypeof null; // returns "object" (this is a known quirk in JavaScript)\n// highlight-end\ntypeof undefined; // returns "undefined"\ntypeof function(){}; // returns "function"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"isNaN"})," ",(0,s.jsx)(n.em,{children:"function"})," is used to determine whether a value is NaN (Not-a-Number).\n",(0,s.jsx)(n.code,{children:"isNaN"})," doesn't check the datatype, it only checks the value. In fact, ",(0,s.jsx)(n.code,{children:"isNaN"})," attempts to convert the value to a number before determining whether it's NaN."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"isNaN(42); // returns false\nisNaN(\"42\"); // returns false (can be converted to the number 42)\nisNaN(true); // returns false (true is converted to 1)\nisNaN([]); // returns false (an empty array can be converted to 0)\nisNaN(null); // returns false (null is converted to 0)\n\nisNaN(undefined); // returns true\nisNaN('boo'); // returns true (cannot be converted to a number)\nisNaN({}); // returns true (objects cannot be converted to a number)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var s=r(6540);const o={},i=s.createContext(o);function t(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);